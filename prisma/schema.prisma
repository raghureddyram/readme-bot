generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Repo {
  id               Int      @id @default(autoincrement())
  name             String   @unique // Repo name should be unique
  backendLanguage  String?
  frontendLanguage String?
  branchNamees         Branch[] // A repo can have multiple branchNamees
}

model Branch {
  id            Int             @id @default(autoincrement())
  repoId        Int
  repo          Repo            @relation(fields: [repoId], references: [id])
  name          String // Name of the branchName
  createdAt     DateTime        @default(now())
  readmes       Readme[] // A branchName can have multiple readmes
  GreptileIndex GreptileIndex[]

  @@unique([repoId, name]) // Each repo can only have one branchName with a specific name
}

model GreptileIndex {
  id        Int      @id @default(autoincrement())
  branchId  Int // Foreign key for the relation to Branch
  branch    Branch   @relation(fields: [branchId], references: [id])
  status    String   @default("submitted")
  createdAt DateTime @default(now())

  @@unique([branchId]) // Ensure that each branchId is unique)
}

model Readme {
  id                         Int      @id @default(autoincrement())
  branchNameId                   Int // Foreign key for the relation to Branch
  branchName                     Branch   @relation(fields: [branchNameId], references: [id])
  content                    String
  generatedFromCommitHistory Boolean  @default(false) // Flag to track if generated from commit history
  createdAt                  DateTime @default(now())
  lastCommitSha              String? // Last commit SHA or generated SHA
}
